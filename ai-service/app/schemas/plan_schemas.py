# plan_schemas.py

from typing import List, Optional
from pydantic import BaseModel
from datetime import datetime

# -------------------------------
# User Profile Schema for generating a plan
# -------------------------------

class UserProfile(BaseModel):
    """
    Describes the user's personal and training profile.
    Sent by the backend as input to the AI service.
    """
    age: Optional[int]
    height_cm: Optional[int]
    weight_kg: Optional[int]
    experience_level: Optional[str]       # e.g., beginner, intermediate, advanced
    fitness_goal: Optional[str]           # e.g., lose fat, build muscle
    equipment: Optional[List[str]] = []   # Available equipment
    health_notes: Optional[str] = None    # Notes like injuries or conditions

# -------------------------------
# Workout Plan Output Schema
# -------------------------------

class WorkoutExercise(BaseModel):
    """
    Represents one exercise in a workout day.
    """
    exercise_name: str
    equipment: str
    sets: Optional[int]
    reps: Optional[int]
    notes: Optional[str] = None


class WorkoutDay(BaseModel):
    """
    Represents a single day in the AI-generated workout plan.
    """
    day_number: int
    day_name: Optional[str]
    focus: Optional[str]                  # e.g., 'Back + Biceps'
    exercises: List[WorkoutExercise]


class WorkoutPlan(BaseModel):
    """
    Full structured workout plan generated by the AI service.
    """
    goal: Optional[str]
    experience_level: Optional[str]
    duration_weeks: Optional[int]
    created_at: Optional[datetime]
    status: Optional[str]                           # e.g., "active", "archived"
    days: List[WorkoutDay]

# -------------------------------
# User's last workout plan
# -------------------------------
class LastWorkoutPlan(BaseModel):
    duration_weeks: Optional[int]
    goal: Optional[str]  
    experience_level: Optional[str]
    status:str
    created_at:datetime

    class Config:
        from_attributes = True      

# -------------------------------
# Full Request Schema to AI Service
# -------------------------------

class AIPlanRequest(BaseModel):
    """
    Input payload received by the AI microservice from the backend.
    Includes current user profile and (optionally) their last plan.
    """
    user_profile: UserProfile
    last_plan: Optional[LastWorkoutPlan] = None


